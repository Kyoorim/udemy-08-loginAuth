{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-08-loginAuth/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer; // 1. 사용자가 직접 logout했을때는 타이머를 세지 않도록 처리\n\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjustedExpirationTime = new Date(expirationTime).getTime();\n  const remainingTime = adjustedExpirationTime - currentTime;\n  return remainingTime;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken); // initialToken을 선언하기 전에는 useState(null)이었음\n\n  const userIsLoggedIn = !!token; // token에 문자열이 있으면 truthy, 없으면 falsy\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime); // 2. logoutTimer 변수에 setTimeout 값 저장하기\n\n    logoutTimer = setTimeout(logoutHandler, remainingTime); // firebase에서는 로그인유효시간을 1시간으로 지정해둠. 그 시간이 지나면 자동으로 로그아웃 되게 함\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext; // 여기까지 설정 마친다음에는 index.js 로 가기\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjustedExpirationTime","remainingTime","retrieveStoredToken","storedToken","localStorage","getItem","AuthContextProvider","props","initialToken","setToken","userIsLoggedIn","logoutHandler","removeItem","clearTimeout","loginHandler","setItem","setTimeout","contextValue","children"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-08-loginAuth/src/store/auth-context.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nlet logoutTimer; // 1. 사용자가 직접 logout했을때는 타이머를 세지 않도록 처리\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjustedExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingTime = adjustedExpirationTime - currentTime;\n\n  return remainingTime;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n};\n\nexport const AuthContextProvider = (props) => {\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken); // initialToken을 선언하기 전에는 useState(null)이었음\n\n  const userIsLoggedIn = !!token; // token에 문자열이 있으면 truthy, 없으면 falsy\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    // 2. logoutTimer 변수에 setTimeout 값 저장하기\n    logoutTimer = setTimeout(logoutHandler, remainingTime); // firebase에서는 로그인유효시간을 1시간으로 지정해둠. 그 시간이 지나면 자동으로 로그아웃 되게 함\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n\n// 여기까지 설정 마친다음에는 index.js 로 가기\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,IAAIC,WAAJ,C,CAAiB;;AAEjB,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACtCC,KAAK,EAAE,EAD+B;EAEtCC,UAAU,EAAE,KAF0B;EAGtCC,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;EAItCG,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;EACjD,MAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;EACA,MAAMC,sBAAsB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA/B;EAEA,MAAME,aAAa,GAAGD,sBAAsB,GAAGH,WAA/C;EAEA,OAAOI,aAAP;AACD,CAPD;;AASA,MAAMC,mBAAmB,GAAG,MAAM;EAChC,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACD,CAFD;;AAIA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAC5C,MAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;EACA,MAAM,CAACd,KAAD,EAAQkB,QAAR,IAAoBtB,QAAQ,CAACqB,YAAD,CAAlC,CAF4C,CAEM;;EAElD,MAAME,cAAc,GAAG,CAAC,CAACnB,KAAzB,CAJ4C,CAIZ;;EAEhC,MAAMoB,aAAa,GAAG,MAAM;IAC1BF,QAAQ,CAAC,IAAD,CAAR;IACAL,YAAY,CAACQ,UAAb,CAAwB,OAAxB;;IAEA,IAAIxB,WAAJ,EAAiB;MACfyB,YAAY,CAACzB,WAAD,CAAZ;IACD;EACF,CAPD;;EASA,MAAM0B,YAAY,GAAG,CAACvB,KAAD,EAAQK,cAAR,KAA2B;IAC9Ca,QAAQ,CAAClB,KAAD,CAAR;IACAa,YAAY,CAACW,OAAb,CAAqB,OAArB,EAA8BxB,KAA9B;IAEA,MAAMU,aAAa,GAAGN,sBAAsB,CAACC,cAAD,CAA5C,CAJ8C,CAM9C;;IACAR,WAAW,GAAG4B,UAAU,CAACL,aAAD,EAAgBV,aAAhB,CAAxB,CAP8C,CAOU;EACzD,CARD;;EAUA,MAAMgB,YAAY,GAAG;IACnB1B,KAAK,EAAEA,KADY;IAEnBC,UAAU,EAAEkB,cAFO;IAGnBjB,KAAK,EAAEqB,YAHY;IAInBpB,MAAM,EAAEiB;EAJW,CAArB;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEM,YAA7B;IAAA,UACGV,KAAK,CAACW;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CArCM;;GAAMZ,mB;;KAAAA,mB;AAuCb,eAAejB,WAAf,C,CAEA"},"metadata":{},"sourceType":"module"}