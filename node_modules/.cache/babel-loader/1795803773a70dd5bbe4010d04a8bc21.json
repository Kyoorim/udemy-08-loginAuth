{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-08-loginAuth/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer; // 1. 사용자가 직접 logout했을때는 타이머를 세지 않도록 처리\n\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjustedExpirationTime = new Date(expirationTime).getTime();\n  const remainingTime = adjustedExpirationTime - currentTime;\n  return remainingTime;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 60000) {\n    // 60000 = 1m\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retrieveStoredToken(); //   const initialToken = localStorage.getItem(\"token\");\n\n  let initialToken;\n\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n\n  const [token, setToken] = useState(initialToken); // initialToken을 선언하기 전에는 useState(null)이었음\n\n  const userIsLoggedIn = !!token; // token에 문자열이 있으면 truthy, 없으면 falsy\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime); // 2. logoutTimer 변수에 setTimeout 값 저장하기\n\n    logoutTimer = setTimeout(logoutHandler, remainingTime); // firebase에서는 로그인유효시간을 1시간으로 지정해둠. 그 시간이 지나면 자동으로 로그아웃 되게 함\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"w4PGjzwU+znkNWWv/cmJxDZqQPE=\");\n\n_c = AuthContextProvider;\nexport default AuthContext; // 여기까지 설정 마친다음에는 index.js 로 가기\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjustedExpirationTime","remainingTime","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","logoutHandler","clearTimeout","loginHandler","setItem","setTimeout","console","log","contextValue","children"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-08-loginAuth/src/store/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nlet logoutTimer; // 1. 사용자가 직접 logout했을때는 타이머를 세지 않도록 처리\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjustedExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingTime = adjustedExpirationTime - currentTime;\n\n  return remainingTime;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 60000) {\n    // 60000 = 1m\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime,\n  };\n};\n\nexport const AuthContextProvider = (props) => {\n  const tokenData = retrieveStoredToken();\n  //   const initialToken = localStorage.getItem(\"token\");\n  let initialToken;\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n  const [token, setToken] = useState(initialToken); // initialToken을 선언하기 전에는 useState(null)이었음\n\n  const userIsLoggedIn = !!token; // token에 문자열이 있으면 truthy, 없으면 falsy\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime);\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    // 2. logoutTimer 변수에 setTimeout 값 저장하기\n    logoutTimer = setTimeout(logoutHandler, remainingTime); // firebase에서는 로그인유효시간을 1시간으로 지정해둠. 그 시간이 지나면 자동으로 로그아웃 되게 함\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData]);\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n\n// 여기까지 설정 마친다음에는 index.js 로 가기\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}